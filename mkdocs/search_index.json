{
    "docs": [
        {
            "location": "/",
            "text": "Getting Started\n\n\nRequirements\n\n\nBefore we continue with the installation and setup steps, you need following things:\n\n\n\n\nA computer or laptop with Windows or Mac OS\n\n\nAndroid Studio software installed with latest version (1.3.0+)\n\n\nAndroid SDK installed with at least version 15\n\n\nParse.com account to set up database\n Own Parse Server\n\n\n\n\n\n\nDocumentation Coverage\n\n\nOnce you have these requirements, this guide will lead you through following steps:\n\n\n\n\nParse Server setup\n\n\nApp Configuration \n Customization\n\n\nContent Moderation\n\n\nMonetization\n\n\nMigration from Parse.com\n\n\n\n\nHowever, this documentation will not cover following topics:\n\n\n\n\nAndroid Studio installation\n\n\nAndroid SDK installation\n\n\n\n\n\n\nHelpful Resources\n\n\nYou can follow below links for the instructions:\n\n\n\n\nOfficial Android Developers Site\n\n\nAndroid Studio guide by \nTechotopia",
            "title": "Getting Started"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/#requirements",
            "text": "Before we continue with the installation and setup steps, you need following things:   A computer or laptop with Windows or Mac OS  Android Studio software installed with latest version (1.3.0+)  Android SDK installed with at least version 15  Parse.com account to set up database  Own Parse Server",
            "title": "Requirements"
        },
        {
            "location": "/#documentation-coverage",
            "text": "Once you have these requirements, this guide will lead you through following steps:   Parse Server setup  App Configuration   Customization  Content Moderation  Monetization  Migration from Parse.com   However, this documentation will not cover following topics:   Android Studio installation  Android SDK installation",
            "title": "Documentation Coverage"
        },
        {
            "location": "/#helpful-resources",
            "text": "You can follow below links for the instructions:   Official Android Developers Site  Android Studio guide by  Techotopia",
            "title": "Helpful Resources"
        },
        {
            "location": "/user-guide/parse-server/",
            "text": "Parse Server\n\n\nThere are many server providers out there, but DigitalOcean is recommended due to its cheap plans. You can get $10 credit (2-month worth) by registering \nhere\n\n\n\n\nSetting Up VPS\n\n\nStep 1: Create a Droplet\n\n\n\n\nCreate a new Droplet \nhere\n\n\nChoose Ubuntu 14.04\n\n\nChoose a size that meets your requirement\n\n\nChoose preferred datacenter region\n\n\nCheck User Data box and enter following script\n\n\nFill in other optional information and click Create\n\n\nOnce done, you will receive server information in your email inbox\n\n\n\n\nUser Data script:\n\n\n#cloud-config\napt_sources:\n  # Enable MongoDB repository\n  - source: deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse\n    keyid: 7F0CEB10\n    filename: mongodb.list\napt_update: true\npackages:\n  - mongodb-org\n  - git\n  - bc\n  - nginx\nruncmd:\n  - sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt\n  - cd ~\n  - curl -sL https://deb.nodesource.com/setup_5.x -o nodesource_setup.sh\n  - sudo -E bash ./nodesource_setup.sh\n  - sudo apt-get install -y nodejs build-essential git\n  - sudo npm install -g parse-server pm2\n\n\n\n\nStep 2: Setup Domain Name\n\n\nWith this setup, you will be able to use your own domain name to use as Parse Server's API endpoint. For a detailed guide, see \nHow To Set Up a Host Name with DigitalOcean\n tutorial. If you need help with setting the DNS servernames, take a look at \nHow To Point to DigitalOcean Nameservers from Common Domain Registrars\n\n\nStep 3: Installing SSH Client\n\n\nYou will need to install a SSH client to connect to the VPS. Some good clients to use:\n\n  - \nPuTTY\n\n  - \nWinSCP\n\n  - \nSuperPuTTY\n\n  - \nPuTTYtray\n\n  - \nKiTTY\n\nFollow \nthis tutorial\n to connect to DigitalOcean VPS using PuTTY.\n\n\n\n\nSetting Up SSL Certificate (Optional)\n\n\nLet's Encrypt is a new Certificate Authority that provides an easy way to obtain free TLS/SSL certificates. Because a certificate is necessary to secure both the migration of data to MongoDB and your Parse Server API endpoint, we'll begin by retrieving one with the \nletsencrypt\n client.\n\n\nStep 1: Install Let's Encrypt\n\n\nThis step is done for you by a custom script entered during Droplet creation.\n\n\nStep 2: Retrieve Initial Certificate\n\n\nChange to the \nletsencrypt\n directory:\n\n\ncd /opt/letsencrypt\n\n\n\n\nRun \nletsencrypt\n with the Standalone plugin:\n\n\nsudo service nginx stop\n./letsencrypt-auto certonly --standalone\n\n\n\n\nYou'll be prompted to answer several questions, including your email address, agreement to a Terms of Service, and the domain name(s) for the certificate. Once finished, you'll receive notes much like the following:\n\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/your_domain_name/fullchain.pem. Your cert will expire\n   on 2016-05-16. To obtain a new version of the certificate in the\n   future, simply run Let's Encrypt again.\n - If you like Let's Encrypt, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\n\n\n\nNote the path and expiration date of your certificate, highlighted in the example output. Your certificate files should now be available in /etc/letsencrypt/\nyour_domain_name\n/\n\n\n\n\nWarning:\n You can safely complete this guide without worrying about certificate renewal, but you will need to address it for any long-lived production environment.\n\n\n\n\nYou may have noticed that your Let's Encrypt certificate is due to expire in 90 days. This is a deliberate feature of the Let's Encrypt approach, intended to minimize the amount of time that a compromised certificate can exist in the wild if something goes wrong.\n\n\nLet's Encrypt is still in beta. Better auto-renewal features are planned, but in the meanwhile you will either have to repeat the certificate retrieval process by hand, or use a scheduled script to handle it for you. The details of automating this process are covered in \nHow To Secure Nginx with Let's Encrypt on Ubuntu 14.04\n, particularly the section on \nsetting up auto renewal\n.\n\n\n\n\nConfigure MongoDB\n\n\nCreate an Admin User\n\n\nWe will create a \nparse\n user to add to server configuration. First, we need to enable authentication in order to create a new user. Run below command to edit \n/etc/mongid.conf\n\n\nsudo nano /etc/mongod.conf\n\n\n\n\nUnder \n# security\n, enable client authorization:\n\n\n# security\nsecurity:\n  authorization: enabled\n\n\n\n\nExit and save the file.\n\n\nBefore restarting the \nmongod\n service, we need to add a user with the \nadmin\n role. Connect to the running MongoDB instance:\n\n\nmongo --port 27017\n\n\n\n\nCreate an admin user. Be sure to replace \npassword\n with  a strong password.\n\n\nuse admin\ndb.createUser({\n  user: \nparse\n,\n  pwd: \npassword\n,\n  roles: [ { role: \nuserAdminAnyDatabase\n, db: \nadmin\n } ]\n})\nexit\n\n\n\n\nCreate a Database\n\n\nIf you have \nLet's Encrypt\n SSL certificates, run following command. Make sure to replace \nmyUsername\n with yours.\n\n\nmongo --port 27017 --ssl --sslAllowInvalidCertificates --authenticationDatabase admin --username myUsername --password\n\n\n\n\nOtherwise, run this command:\n\n\nmongo --port 27017 admin --username myUsername--password\n\n\n\n\nYou will be prompt to enter the password you created earlier.\n\n\nOnce logged in, you will need to create a database and a user that is used for migration. Run following command with replacing \ndatabase_name\n with your own.\n\n\nuse database_name\ndb.createUser({ user: \nparse\n, pwd: \npassword\n, roles: [ \nreadWrite\n, \ndbAdmin\n ] })\n\n\n\n\nRestart the mongod service:\n\n\nsudo service mongod restart\n\n\n\n\n\n\nInstalling Parse Server\n\n\nUse \nnpm\n to install the \nparse-server\n utility, the \npm2\n process manager, and their dependencies, globally:\n\n\nsudo npm install -g parse-server pm2\n\n\n\n\nInstead of running \nparse-server\n as \nroot\n or your \nsudo\n user, we'll create a system user called \nparse\n:\n\n\nsudo useradd --create-home --system parse\n\n\n\n\nNow set a password for \nparse\n:\n\n\nsudo passwd parse\n\n\n\n\nYou'll be prompted to enter a password twice.\n\n\nNow, use the \nsu\n command to become the \nparse\n user:\n\n\nsudo su parse\n\n\n\n\n\n\nRetrieve Keys\n\n\nYou'll need to retrieve some of the keys for your app. In the Parse dashboard, click on \nApp Settings\n followed by \nSecurity \n Keys\n:\n\n\n\n\nSince we only have Parse integrated for Android, you only need to collect \nMaster Key\n, \nApplication ID\n and \nClient Key\n to proceed with further setup. Using the same keys as before will not require you setup the source code again.\n\n\n\n\nConfigure Parse Server\n\n\nPM2\n is a feature-rich process manager, popular with Node.js developers. We'll use the \npm2\n utility to configure our \nparse-server\n instance and keep it running over the long term.\n\n\nStep 1: Configure pm2\n\n\nChange to \nparse\n's home directory:\n\n\ncd ~\n\n\n\n\nWe will edit the file called \n/home/parse/ecosystem.json\n\n\nnano ecosystem.json\n\n\n\n\nPaste the following, changing configuration values to reflect your MongoDB connection string, Application ID, and Master Key:\n\n\n{\n  \napps\n : [{\n    \nname\n        : \nparse-wrapper\n,\n    \nscript\n      : \n/usr/bin/parse-server\n,\n    \nwatch\n       : true,\n    \nmerge_logs\n  : true,\n    \ncwd\n         : \n/home/parse\n,\n    \nenv\n: {\n      \nPARSE_SERVER_CLOUD_CODE_MAIN\n: \n/home/parse/cloud/main.js\n,\n      \nPARSE_SERVER_DATABASE_URI\n: \nmongodb://parse:password@your_domain_name:27017/database_name?ssl=true\n,\n      \nPARSE_SERVER_APPLICATION_ID\n: \nyour_application_id\n,\n      \nPARSE_SERVER_MASTER_KEY\n: \nyour_master_key\n,\n      \nPARSE_SERVER_CLIENT_KEY\n: \nyour_client_key\n,\n      \nPARSE_SERVER_FACEBOOK_APP_IDS\n: \nyour_facebook_app_id\n\n    }\n  }]\n}\n\n\n\n\nYou can also configure other options below:\n\n\n\n\nPARSE_SERVER_URL\n\n\nPARSE_SERVER_JAVASCRIPT_KEY\n\n\nPARSE_SERVER_REST_API_KEY\n\n\nPARSE_SERVER_DOT_NET_KEY\n\n\nPARSE_SERVER_ENABLE_ANON_USERS\n\n\n\n\nOther options with explanations can be found at \nParsePlatform/parse-server\n\n\nExit and save \necosystem.json\n\n\nStep 2: Start parse-server with pm2\n\n\nNow run the script with \npm2\n\n\npm2 start ecosystem.json\n\n\n\n\nSample Output\n\n\n...\n[PM2] Spawning PM2 daemon\n[PM2] PM2 Successfully daemonized\n[PM2] Process launched\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App name      \u2502 id \u2502 mode \u2502 pid  \u2502 status \u2502 restart \u2502 uptime \u2502 memory      \u2502 watching \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 parse-wrapper \u2502 0  \u2502 fork \u2502 3499 \u2502 online \u2502 0       \u2502 0s     \u2502 13.680 MB   \u2502  enabled \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nUse `pm2 show \nid|name\n` to get more details about an app\n\n\n\n\nNow tell \npm2\n to save this process list:\n\n\npm2 save\n\n\n\n\n\n\nSample Output\n\n\n[PM2] Dumping processes\n\n\n\n\nThe list of processes \npm2\n is running for the parse user should now be stored in \n/home/parse/.pm2\n.\n\n\nNow we need to make sure the \nparse-wrapper\n process we defined earlier in ecosystem.json is restored each time the server is restarted. Fortunately, \npm2\n can generate and install a script on its own.\n\n\nExit to your regular \nsudo\n user:\n\n\nexit\n\n\n\n\nTell pm2 to install initialization scripts for Ubuntu, to be run as the parse user, using /home/parse as its home directory:\n\n\nsudo pm2 startup ubuntu -u parse --hp /home/parse/\n\n\n\n\nSample Output\n\n\n[PM2] Spawning PM2 daemon\n[PM2] PM2 Successfully daemonized\n[PM2] Generating system init script in /etc/init.d/pm2-init.sh\n[PM2] Making script booting at startup...\n[PM2] -ubuntu- Using the command:\n    su -c \nchmod +x /etc/init.d/pm2-init.sh \n update-rc.d pm2-init.sh defaults\n\nSystem start/stop links for /etc/init.d/pm2-init.sh already exist.\n[PM2] Done.\n\n\n\n\n\n\nConfigure Nginx\n\n\nWe'll use the Nginx web server to provide a reverse proxy to \nparse-server\n, so that we can serve the Parse API securely over TLS/SSL. If you did not install \nLet's Encrypt\n, you can skip this part.\n\n\nOpen \n/etc/nginx/sites-enabled/default\n\n\nsudo nano /etc/nginx/sites-enabled/default\n\n\n\n\nReplace its contents with the following (make sure to replace \nyour_domain_name\n):\n\n\n# HTTP - redirect all requests to HTTPS\nserver {\n    listen 80;\n    listen [::]:80 default_server ipv6only=on;\n    return 301 https://$host$request_uri;\n}\n\n# HTTPS - serve HTML from /usr/share/nginx/html, proxy requests to /parse/\n# through to Parse Server\nserver {\n        listen 443;\n        server_name your_domain_name;\n\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        ssl on;\n        # Use certificate and key provided by Let's Encrypt:\n        ssl_certificate /etc/letsencrypt/live/your_domain_name/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/your_domain_name/privkey.pem;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n        # Pass requests for /parse/ to Parse Server instance at localhost:1337\n        location /parse/ {\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-NginX-Proxy true;\n                proxy_pass http://localhost:1337/;\n                proxy_ssl_session_reuse off;\n                proxy_set_header Host $http_host;\n                proxy_redirect off;\n        }\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n\n\n\n\nExit the editor and save the file. Restart Nginx so that changes take effect:\n\n\nsudo service nginx restart\n\n\n\n\n\n\nStoring files with AWS S3 (Optional)\n\n\nPlease note that current files stored on Parse are not migrated yet since Parse team is working on a solution at \nParsePlatform/parse-server/wiki/Files-Migration\n. Stay tuned until we have the final solution from them. In the meantime, your files are still working and newly uploaded files will be stored on your server. \n\n\nTo use AWS S3 as file storage rather than current server, check tutorial on Github: \nParsePlatform/parse-server/wiki/Storing-Files-in-AWS-S3",
            "title": "Parse Server"
        },
        {
            "location": "/user-guide/parse-server/#parse-server",
            "text": "There are many server providers out there, but DigitalOcean is recommended due to its cheap plans. You can get $10 credit (2-month worth) by registering  here",
            "title": "Parse Server"
        },
        {
            "location": "/user-guide/parse-server/#setting-up-vps",
            "text": "",
            "title": "Setting Up VPS"
        },
        {
            "location": "/user-guide/parse-server/#step-1-create-a-droplet",
            "text": "Create a new Droplet  here  Choose Ubuntu 14.04  Choose a size that meets your requirement  Choose preferred datacenter region  Check User Data box and enter following script  Fill in other optional information and click Create  Once done, you will receive server information in your email inbox   User Data script:  #cloud-config\napt_sources:\n  # Enable MongoDB repository\n  - source: deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse\n    keyid: 7F0CEB10\n    filename: mongodb.list\napt_update: true\npackages:\n  - mongodb-org\n  - git\n  - bc\n  - nginx\nruncmd:\n  - sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt\n  - cd ~\n  - curl -sL https://deb.nodesource.com/setup_5.x -o nodesource_setup.sh\n  - sudo -E bash ./nodesource_setup.sh\n  - sudo apt-get install -y nodejs build-essential git\n  - sudo npm install -g parse-server pm2",
            "title": "Step 1: Create a Droplet"
        },
        {
            "location": "/user-guide/parse-server/#step-2-setup-domain-name",
            "text": "With this setup, you will be able to use your own domain name to use as Parse Server's API endpoint. For a detailed guide, see  How To Set Up a Host Name with DigitalOcean  tutorial. If you need help with setting the DNS servernames, take a look at  How To Point to DigitalOcean Nameservers from Common Domain Registrars",
            "title": "Step 2: Setup Domain Name"
        },
        {
            "location": "/user-guide/parse-server/#step-3-installing-ssh-client",
            "text": "You will need to install a SSH client to connect to the VPS. Some good clients to use: \n  -  PuTTY \n  -  WinSCP \n  -  SuperPuTTY \n  -  PuTTYtray \n  -  KiTTY \nFollow  this tutorial  to connect to DigitalOcean VPS using PuTTY.",
            "title": "Step 3: Installing SSH Client"
        },
        {
            "location": "/user-guide/parse-server/#setting-up-ssl-certificate-optional",
            "text": "Let's Encrypt is a new Certificate Authority that provides an easy way to obtain free TLS/SSL certificates. Because a certificate is necessary to secure both the migration of data to MongoDB and your Parse Server API endpoint, we'll begin by retrieving one with the  letsencrypt  client.",
            "title": "Setting Up SSL Certificate (Optional)"
        },
        {
            "location": "/user-guide/parse-server/#step-1-install-lets-encrypt",
            "text": "This step is done for you by a custom script entered during Droplet creation.",
            "title": "Step 1: Install Let's Encrypt"
        },
        {
            "location": "/user-guide/parse-server/#step-2-retrieve-initial-certificate",
            "text": "Change to the  letsencrypt  directory:  cd /opt/letsencrypt  Run  letsencrypt  with the Standalone plugin:  sudo service nginx stop\n./letsencrypt-auto certonly --standalone  You'll be prompted to answer several questions, including your email address, agreement to a Terms of Service, and the domain name(s) for the certificate. Once finished, you'll receive notes much like the following:  IMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/your_domain_name/fullchain.pem. Your cert will expire\n   on 2016-05-16. To obtain a new version of the certificate in the\n   future, simply run Let's Encrypt again.\n - If you like Let's Encrypt, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le  Note the path and expiration date of your certificate, highlighted in the example output. Your certificate files should now be available in /etc/letsencrypt/ your_domain_name /   Warning:  You can safely complete this guide without worrying about certificate renewal, but you will need to address it for any long-lived production environment.   You may have noticed that your Let's Encrypt certificate is due to expire in 90 days. This is a deliberate feature of the Let's Encrypt approach, intended to minimize the amount of time that a compromised certificate can exist in the wild if something goes wrong.  Let's Encrypt is still in beta. Better auto-renewal features are planned, but in the meanwhile you will either have to repeat the certificate retrieval process by hand, or use a scheduled script to handle it for you. The details of automating this process are covered in  How To Secure Nginx with Let's Encrypt on Ubuntu 14.04 , particularly the section on  setting up auto renewal .",
            "title": "Step 2: Retrieve Initial Certificate"
        },
        {
            "location": "/user-guide/parse-server/#configure-mongodb",
            "text": "",
            "title": "Configure MongoDB"
        },
        {
            "location": "/user-guide/parse-server/#create-an-admin-user",
            "text": "We will create a  parse  user to add to server configuration. First, we need to enable authentication in order to create a new user. Run below command to edit  /etc/mongid.conf  sudo nano /etc/mongod.conf  Under  # security , enable client authorization:  # security\nsecurity:\n  authorization: enabled  Exit and save the file.  Before restarting the  mongod  service, we need to add a user with the  admin  role. Connect to the running MongoDB instance:  mongo --port 27017  Create an admin user. Be sure to replace  password  with  a strong password.  use admin\ndb.createUser({\n  user:  parse ,\n  pwd:  password ,\n  roles: [ { role:  userAdminAnyDatabase , db:  admin  } ]\n})\nexit",
            "title": "Create an Admin User"
        },
        {
            "location": "/user-guide/parse-server/#create-a-database",
            "text": "If you have  Let's Encrypt  SSL certificates, run following command. Make sure to replace  myUsername  with yours.  mongo --port 27017 --ssl --sslAllowInvalidCertificates --authenticationDatabase admin --username myUsername --password  Otherwise, run this command:  mongo --port 27017 admin --username myUsername--password  You will be prompt to enter the password you created earlier.  Once logged in, you will need to create a database and a user that is used for migration. Run following command with replacing  database_name  with your own.  use database_name\ndb.createUser({ user:  parse , pwd:  password , roles: [  readWrite ,  dbAdmin  ] })  Restart the mongod service:  sudo service mongod restart",
            "title": "Create a Database"
        },
        {
            "location": "/user-guide/parse-server/#installing-parse-server",
            "text": "Use  npm  to install the  parse-server  utility, the  pm2  process manager, and their dependencies, globally:  sudo npm install -g parse-server pm2  Instead of running  parse-server  as  root  or your  sudo  user, we'll create a system user called  parse :  sudo useradd --create-home --system parse  Now set a password for  parse :  sudo passwd parse  You'll be prompted to enter a password twice.  Now, use the  su  command to become the  parse  user:  sudo su parse",
            "title": "Installing Parse Server"
        },
        {
            "location": "/user-guide/parse-server/#retrieve-keys",
            "text": "You'll need to retrieve some of the keys for your app. In the Parse dashboard, click on  App Settings  followed by  Security   Keys :   Since we only have Parse integrated for Android, you only need to collect  Master Key ,  Application ID  and  Client Key  to proceed with further setup. Using the same keys as before will not require you setup the source code again.",
            "title": "Retrieve Keys"
        },
        {
            "location": "/user-guide/parse-server/#configure-parse-server",
            "text": "PM2  is a feature-rich process manager, popular with Node.js developers. We'll use the  pm2  utility to configure our  parse-server  instance and keep it running over the long term.",
            "title": "Configure Parse Server"
        },
        {
            "location": "/user-guide/parse-server/#step-1-configure-pm2",
            "text": "Change to  parse 's home directory:  cd ~  We will edit the file called  /home/parse/ecosystem.json  nano ecosystem.json  Paste the following, changing configuration values to reflect your MongoDB connection string, Application ID, and Master Key:  {\n   apps  : [{\n     name         :  parse-wrapper ,\n     script       :  /usr/bin/parse-server ,\n     watch        : true,\n     merge_logs   : true,\n     cwd          :  /home/parse ,\n     env : {\n       PARSE_SERVER_CLOUD_CODE_MAIN :  /home/parse/cloud/main.js ,\n       PARSE_SERVER_DATABASE_URI :  mongodb://parse:password@your_domain_name:27017/database_name?ssl=true ,\n       PARSE_SERVER_APPLICATION_ID :  your_application_id ,\n       PARSE_SERVER_MASTER_KEY :  your_master_key ,\n       PARSE_SERVER_CLIENT_KEY :  your_client_key ,\n       PARSE_SERVER_FACEBOOK_APP_IDS :  your_facebook_app_id \n    }\n  }]\n}  You can also configure other options below:   PARSE_SERVER_URL  PARSE_SERVER_JAVASCRIPT_KEY  PARSE_SERVER_REST_API_KEY  PARSE_SERVER_DOT_NET_KEY  PARSE_SERVER_ENABLE_ANON_USERS   Other options with explanations can be found at  ParsePlatform/parse-server  Exit and save  ecosystem.json",
            "title": "Step 1: Configure pm2"
        },
        {
            "location": "/user-guide/parse-server/#step-2-start-parse-server-with-pm2",
            "text": "Now run the script with  pm2  pm2 start ecosystem.json  Sample Output  ...\n[PM2] Spawning PM2 daemon\n[PM2] PM2 Successfully daemonized\n[PM2] Process launched\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 App name      \u2502 id \u2502 mode \u2502 pid  \u2502 status \u2502 restart \u2502 uptime \u2502 memory      \u2502 watching \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 parse-wrapper \u2502 0  \u2502 fork \u2502 3499 \u2502 online \u2502 0       \u2502 0s     \u2502 13.680 MB   \u2502  enabled \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nUse `pm2 show  id|name ` to get more details about an app  Now tell  pm2  to save this process list:  pm2 save   Sample Output  [PM2] Dumping processes   The list of processes  pm2  is running for the parse user should now be stored in  /home/parse/.pm2 .  Now we need to make sure the  parse-wrapper  process we defined earlier in ecosystem.json is restored each time the server is restarted. Fortunately,  pm2  can generate and install a script on its own.  Exit to your regular  sudo  user:  exit  Tell pm2 to install initialization scripts for Ubuntu, to be run as the parse user, using /home/parse as its home directory:  sudo pm2 startup ubuntu -u parse --hp /home/parse/  Sample Output  [PM2] Spawning PM2 daemon\n[PM2] PM2 Successfully daemonized\n[PM2] Generating system init script in /etc/init.d/pm2-init.sh\n[PM2] Making script booting at startup...\n[PM2] -ubuntu- Using the command:\n    su -c  chmod +x /etc/init.d/pm2-init.sh   update-rc.d pm2-init.sh defaults \nSystem start/stop links for /etc/init.d/pm2-init.sh already exist.\n[PM2] Done.",
            "title": "Step 2: Start parse-server with pm2"
        },
        {
            "location": "/user-guide/parse-server/#configure-nginx",
            "text": "We'll use the Nginx web server to provide a reverse proxy to  parse-server , so that we can serve the Parse API securely over TLS/SSL. If you did not install  Let's Encrypt , you can skip this part.  Open  /etc/nginx/sites-enabled/default  sudo nano /etc/nginx/sites-enabled/default  Replace its contents with the following (make sure to replace  your_domain_name ):  # HTTP - redirect all requests to HTTPS\nserver {\n    listen 80;\n    listen [::]:80 default_server ipv6only=on;\n    return 301 https://$host$request_uri;\n}\n\n# HTTPS - serve HTML from /usr/share/nginx/html, proxy requests to /parse/\n# through to Parse Server\nserver {\n        listen 443;\n        server_name your_domain_name;\n\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n\n        ssl on;\n        # Use certificate and key provided by Let's Encrypt:\n        ssl_certificate /etc/letsencrypt/live/your_domain_name/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/your_domain_name/privkey.pem;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n\n        # Pass requests for /parse/ to Parse Server instance at localhost:1337\n        location /parse/ {\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-NginX-Proxy true;\n                proxy_pass http://localhost:1337/;\n                proxy_ssl_session_reuse off;\n                proxy_set_header Host $http_host;\n                proxy_redirect off;\n        }\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}  Exit the editor and save the file. Restart Nginx so that changes take effect:  sudo service nginx restart",
            "title": "Configure Nginx"
        },
        {
            "location": "/user-guide/parse-server/#storing-files-with-aws-s3-optional",
            "text": "Please note that current files stored on Parse are not migrated yet since Parse team is working on a solution at  ParsePlatform/parse-server/wiki/Files-Migration . Stay tuned until we have the final solution from them. In the meantime, your files are still working and newly uploaded files will be stored on your server.   To use AWS S3 as file storage rather than current server, check tutorial on Github:  ParsePlatform/parse-server/wiki/Storing-Files-in-AWS-S3",
            "title": "Storing files with AWS S3 (Optional)"
        },
        {
            "location": "/user-guide/source-code-configuration/",
            "text": "Parse\n\n\n\n\nOpen Config file and res/values/strings.xml\n\n\nEdit following keys with your Application ID and Client Key you created earlier on Parse Server\n\n\n\n\nConfig.java\n\n\npublic static final String PARSE_APPLICATION_ID = \nENTER_YOUR_APPLICATION_ID\n;\npublic static final String PARSE_CLIENT_KEY = \nENTER_YOUR_CLIENT_KEY\n;\n\n\n\n\nres/values/strings.xml\n\n\nstring name=\nparse_app_id\nENTER_YOUR_APPLICATION_ID\n/string\n\n\nstring name=\nparse_client_key\nENTER_YOUR_CLIENT_KEY\n/string\n\n\n\n\n\n\nSocial Login\n\n\nConfigure Facebook Login\n\n\nBy default, the app will have Facebook login. You need to change following field in res/values/strings.xml so that this could work.\n\n\nstring name=\nfacebook_app_id\nENTER_YOUR_FACEBOOK_APP_ID\n/string\n\n\n\n\n\n\nDisable Facebook Login\n\n\nIf you wish to disable Facebook Login, you can remove following meta-data from AndroidManifest.xml file\n\n\nmeta-data\n android:name=\ncom.parse.ui.ParseLoginActivity.FACEBOOK_LOGIN_ENABLED\n\n    android:value=\ntrue\n /\n\n\nmeta-data\n android:name=\ncom.parse.ui.ParseLoginActivity.FACEBOOK_LOGIN_PERMISSIONS\n\n    android:resource=\n@array/my_facebook_permissions\n /\n\n\n\n\n\n\nApp Intro\n\n\nChange slides content\n\n\nOpen \nres/values/strings.xml\n and edit following fields\n\n\nstring name=\nintro.slide1.title\nWallX\n/string\n\n\nstring name=\nintro.slide1.description\nYour ultimate wallpaper application\n/string\n\n\nstring name=\nintro.slide2.title\nEasy Customization\n/string\n\n\nstring name=\nintro.slide2.description\nThis app Intro is easy to customize. So do other parts of the source.\n/string\n\n\nstring name=\nintro.slide3.title\nSold on Envato\n/string\n\n\nstring name=\nintro.slide3.description\nThis item is sold exclusively on Codecanyon\n/string\n\n\n\n\n\n\nChange slides' images\n\n\nReplace following files in res/drawable with desired ones\n\n\n\n\nintro_slide1.jpg \n\n\nintro_slide2.jpg \n\n\nintro_slide3.jpg\n\n\n\n\n\n\nAbout\n\n\nChange Social identities\n\n\nEdit following settings in Config.java\n\n\npublic static final String FACEBOOK_PAGE = \nbentenstudio\n;\npublic static final String TWITTER_ID = \nbentenstudio\n;\npublic static final String EMAIL_ID = \nsupport@bentenstudio.co\n;\n\n\n\n\n\n\nChange the background\n\n\nReplace \ndrawable/about_background.jpg\n with your desired image",
            "title": "Source Code Configuration"
        },
        {
            "location": "/user-guide/source-code-configuration/#parse",
            "text": "Open Config file and res/values/strings.xml  Edit following keys with your Application ID and Client Key you created earlier on Parse Server   Config.java  public static final String PARSE_APPLICATION_ID =  ENTER_YOUR_APPLICATION_ID ;\npublic static final String PARSE_CLIENT_KEY =  ENTER_YOUR_CLIENT_KEY ;  res/values/strings.xml  string name= parse_app_id ENTER_YOUR_APPLICATION_ID /string  string name= parse_client_key ENTER_YOUR_CLIENT_KEY /string",
            "title": "Parse"
        },
        {
            "location": "/user-guide/source-code-configuration/#social-login",
            "text": "",
            "title": "Social Login"
        },
        {
            "location": "/user-guide/source-code-configuration/#configure-facebook-login",
            "text": "By default, the app will have Facebook login. You need to change following field in res/values/strings.xml so that this could work.  string name= facebook_app_id ENTER_YOUR_FACEBOOK_APP_ID /string",
            "title": "Configure Facebook Login"
        },
        {
            "location": "/user-guide/source-code-configuration/#disable-facebook-login",
            "text": "If you wish to disable Facebook Login, you can remove following meta-data from AndroidManifest.xml file  meta-data\n android:name= com.parse.ui.ParseLoginActivity.FACEBOOK_LOGIN_ENABLED \n    android:value= true  /  meta-data\n android:name= com.parse.ui.ParseLoginActivity.FACEBOOK_LOGIN_PERMISSIONS \n    android:resource= @array/my_facebook_permissions  /",
            "title": "Disable Facebook Login"
        },
        {
            "location": "/user-guide/source-code-configuration/#app-intro",
            "text": "",
            "title": "App Intro"
        },
        {
            "location": "/user-guide/source-code-configuration/#change-slides-content",
            "text": "Open  res/values/strings.xml  and edit following fields  string name= intro.slide1.title WallX /string  string name= intro.slide1.description Your ultimate wallpaper application /string  string name= intro.slide2.title Easy Customization /string  string name= intro.slide2.description This app Intro is easy to customize. So do other parts of the source. /string  string name= intro.slide3.title Sold on Envato /string  string name= intro.slide3.description This item is sold exclusively on Codecanyon /string",
            "title": "Change slides content"
        },
        {
            "location": "/user-guide/source-code-configuration/#change-slides-images",
            "text": "Replace following files in res/drawable with desired ones   intro_slide1.jpg   intro_slide2.jpg   intro_slide3.jpg",
            "title": "Change slides' images"
        },
        {
            "location": "/user-guide/source-code-configuration/#about",
            "text": "",
            "title": "About"
        },
        {
            "location": "/user-guide/source-code-configuration/#change-social-identities",
            "text": "Edit following settings in Config.java  public static final String FACEBOOK_PAGE =  bentenstudio ;\npublic static final String TWITTER_ID =  bentenstudio ;\npublic static final String EMAIL_ID =  support@bentenstudio.co ;",
            "title": "Change Social identities"
        },
        {
            "location": "/user-guide/source-code-configuration/#change-the-background",
            "text": "Replace  drawable/about_background.jpg  with your desired image",
            "title": "Change the background"
        },
        {
            "location": "/user-guide/content-moderation/",
            "text": "Moderation Mode\n\n\nModeration mode means that all submissions will need to be approved before showing in app. \n\n\nTo turn this on, open Config.java file and change \nMODERATION_MODE\n to \ntrue\n. This value is \nfalse\n by default.\n\n\nPhoto Approval\n\n\nBy default, any photo that was uploaded by users will have this value as false. It is only true when photos are uploaded by Dashboard or it was marked as true later in the Dashboard \n Moderation\n\n\nTo approve a photo, login to Dashboard and browse to Moderation section. Pick the photo that needs to be moderated and click \"Approve\" button. \n\n\nOr you can manually change \nisApproved\n value to \ntrue\n in any wallpaper object.\n\n\nFlag Threshold\n\n\nFlag threshold: a value which decides if a photo is appropriate or not. This value is increased whenever a logged-in user choose \"Flag inappropriate\" option in app. Any approved photo will be displayed no matter how high this value is.",
            "title": "Content Moderation"
        },
        {
            "location": "/user-guide/content-moderation/#moderation-mode",
            "text": "Moderation mode means that all submissions will need to be approved before showing in app.   To turn this on, open Config.java file and change  MODERATION_MODE  to  true . This value is  false  by default.",
            "title": "Moderation Mode"
        },
        {
            "location": "/user-guide/content-moderation/#photo-approval",
            "text": "By default, any photo that was uploaded by users will have this value as false. It is only true when photos are uploaded by Dashboard or it was marked as true later in the Dashboard   Moderation  To approve a photo, login to Dashboard and browse to Moderation section. Pick the photo that needs to be moderated and click \"Approve\" button.   Or you can manually change  isApproved  value to  true  in any wallpaper object.",
            "title": "Photo Approval"
        },
        {
            "location": "/user-guide/content-moderation/#flag-threshold",
            "text": "Flag threshold: a value which decides if a photo is appropriate or not. This value is increased whenever a logged-in user choose \"Flag inappropriate\" option in app. Any approved photo will be displayed no matter how high this value is.",
            "title": "Flag Threshold"
        },
        {
            "location": "/user-guide/monetization/",
            "text": "Ads Toggle\n\n\nThe app support banners and interstitial ads which show up when users quit. Open \nConfig\n file and edit following variable to enable or disable ads.\n\n\n\n\nSHOULD_SHOW_ADS\n\n\nSHOULD_SHOW_BANNERS\n\n\nSHOULD_SHOW_INTERSTITIAL\n\n\n\n\nThe expected values should be \ntrue\n or \nfalse\n\n\nAd Unit Setup\n\n\nOpen \nres/values/strings.xml\n and edit following fields:\n\n\nstring name=\nbanner_ad_unit_id\nca-app-pub-3940256099942544/6300978111\n/string\n\n\nstring name=\ninterstitial_unit_id\nca-app-pub-3940256099942544/1033173712\n/string",
            "title": "Monetization"
        },
        {
            "location": "/user-guide/monetization/#ads-toggle",
            "text": "The app support banners and interstitial ads which show up when users quit. Open  Config  file and edit following variable to enable or disable ads.   SHOULD_SHOW_ADS  SHOULD_SHOW_BANNERS  SHOULD_SHOW_INTERSTITIAL   The expected values should be  true  or  false",
            "title": "Ads Toggle"
        },
        {
            "location": "/user-guide/monetization/#ad-unit-setup",
            "text": "Open  res/values/strings.xml  and edit following fields:  string name= banner_ad_unit_id ca-app-pub-3940256099942544/6300978111 /string  string name= interstitial_unit_id ca-app-pub-3940256099942544/1033173712 /string",
            "title": "Ad Unit Setup"
        },
        {
            "location": "/user-guide/migration-from-parse-com/",
            "text": "Configure MongoDB\n\n\nStep 1: Enable SSL Connection\n\n\nParse provides a migration tool for existing applications. In order to make use of it, we need to open MongoDB to external connections and secure it with a copy of the TLS/SSL certificate from Let's Encrypt. Start by combining \nfullchain1.pem\n and \nprivkey1.pem\n into a new file in \n/etc/ssl\n (remember to change \ndomain_name\n with yours):\n\n\nsudo cat /etc/letsencrypt/archive/domain_name/{fullchain1.pem,privkey1.pem} | sudo tee /etc/ssl/mongo.pem\n\n\n\n\n\n\nYou will have to repeat the above command after renewing your Let's Encrypt certificate. If you configure auto-renewal of the Let's Encrypt certificate, remember to include this operation.\n\n\n\n\nMake sure \nmongo.pem\n is owned by the \nmongodb\n user, and readable only by its owner:\n\n\nsudo chown mongodb:mongodb /etc/ssl/mongo.pem\nsudo chmod 600 /etc/ssl/mongo.pem\n\n\n\n\nNow, open \n/etc/mongod.conf\n:\n\n\nsudo nano /etc/mongod.conf\n\n\n\n\nHere, we'll make several important changes.\n\n\nFirst, look for the \nbindIp\n line in the \nnet\n: section, and tell MongoDB to listen on all addresses by changing \n127.0.0.1\n to \n0.0.0.0\n. Below this, add SSL configuration to the same section:\n\n\n# network interfaces\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongo.pem\n\n\n\n\n\n\nYou can skip above commands and configs if you skip Let's Encrypt installation. You still need to edit \n/etc/mongod.conf\n to continue with the migration.\n\n\n\n\nFinally, the migration tool requires us to set the \nfailIndexKeyTooLong\n parameter to \nfalse\n:\n\n\nsetParameter:\n  failIndexKeyTooLong: false\n\n\n\n\n\n\nNote:\n Whitespace is significant in MongoDB configuration files, which are based on YAML. When copying configuration values, make sure that you preserve indentation.\n\n\n\n\nExit and save the file.\n\n\nRestart the mongod service:\n\n\nsudo service mongod restart\n\n\n\n\nInitiate Migration Process\n\n\nLogin to Parse dashboard at dashboard.parse.com then open the settings for your app. Under \nGeneral\n, locate the \nMigrate\n button and click it:\n\n\n\n\nYou will be prompted for a MongoDB connection string. Use the following format:\n\n\nmongodb://parse:password@your_domain_name:27017/database_name\n\n\n\n\nIf you have \nLet's Encrypt\n SSL, add \n?ssl=true\n after the URL.\n\n\nFor example, if you are using the domain \nexample.com\n, with the user \nparse\n, the password \nfoo\n, and a database called \nwallx\n, your connection string would look like this:\n\n\nmongodb://parse:foo@example.com:27017/wallx?ssl=true\n\n\n\n\nThe configuration should look like below:\n\n\n\n\nClick \nBegin the migration\n. You should see progress dialogs for copying a snapshot of your Parse hosted database to your server, and then for syncing new data since the snapshot was taken. The duration of this process will depend on the amount of data to be transferred, and may be substantial.\n\n\n\n\n\n\nDon't click Finalize yet.\n We need to verify the migration first.\n\n\nVerify Data Migration\n\n\nReturn to your \nmongo\n shell, and examine your local database. Begin by accessing \ndatabase_name\n and examining the collections it contains:\n\n\nuse database_name\nshow collections\n\n\n\n\nSample output\n\n\nWallpaper\nLikes\n_Index\n_SCHEMA\n_Session\n_User\n_dummy\nsystem.indexes\n\n\n\n\nYou can examine the contents of a specific collection with the \n.find()\nmethod:\n\n\ndb.Wallpaper.find()\n\n\n\n\nAfter verifying the data in your new database, come back to Parse dashboard in your browser and the \nMigration\n tab:\n\n\n\n\nClick the \nFinalize\n button:\n\n\n\n\nYour app should now be migrated.",
            "title": "Migration from Parse.com"
        },
        {
            "location": "/user-guide/migration-from-parse-com/#configure-mongodb",
            "text": "",
            "title": "Configure MongoDB"
        },
        {
            "location": "/user-guide/migration-from-parse-com/#step-1-enable-ssl-connection",
            "text": "Parse provides a migration tool for existing applications. In order to make use of it, we need to open MongoDB to external connections and secure it with a copy of the TLS/SSL certificate from Let's Encrypt. Start by combining  fullchain1.pem  and  privkey1.pem  into a new file in  /etc/ssl  (remember to change  domain_name  with yours):  sudo cat /etc/letsencrypt/archive/domain_name/{fullchain1.pem,privkey1.pem} | sudo tee /etc/ssl/mongo.pem   You will have to repeat the above command after renewing your Let's Encrypt certificate. If you configure auto-renewal of the Let's Encrypt certificate, remember to include this operation.   Make sure  mongo.pem  is owned by the  mongodb  user, and readable only by its owner:  sudo chown mongodb:mongodb /etc/ssl/mongo.pem\nsudo chmod 600 /etc/ssl/mongo.pem  Now, open  /etc/mongod.conf :  sudo nano /etc/mongod.conf  Here, we'll make several important changes.  First, look for the  bindIp  line in the  net : section, and tell MongoDB to listen on all addresses by changing  127.0.0.1  to  0.0.0.0 . Below this, add SSL configuration to the same section:  # network interfaces\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongo.pem   You can skip above commands and configs if you skip Let's Encrypt installation. You still need to edit  /etc/mongod.conf  to continue with the migration.   Finally, the migration tool requires us to set the  failIndexKeyTooLong  parameter to  false :  setParameter:\n  failIndexKeyTooLong: false   Note:  Whitespace is significant in MongoDB configuration files, which are based on YAML. When copying configuration values, make sure that you preserve indentation.   Exit and save the file.  Restart the mongod service:  sudo service mongod restart",
            "title": "Step 1: Enable SSL Connection"
        },
        {
            "location": "/user-guide/migration-from-parse-com/#initiate-migration-process",
            "text": "Login to Parse dashboard at dashboard.parse.com then open the settings for your app. Under  General , locate the  Migrate  button and click it:   You will be prompted for a MongoDB connection string. Use the following format:  mongodb://parse:password@your_domain_name:27017/database_name  If you have  Let's Encrypt  SSL, add  ?ssl=true  after the URL.  For example, if you are using the domain  example.com , with the user  parse , the password  foo , and a database called  wallx , your connection string would look like this:  mongodb://parse:foo@example.com:27017/wallx?ssl=true  The configuration should look like below:   Click  Begin the migration . You should see progress dialogs for copying a snapshot of your Parse hosted database to your server, and then for syncing new data since the snapshot was taken. The duration of this process will depend on the amount of data to be transferred, and may be substantial.    Don't click Finalize yet.  We need to verify the migration first.",
            "title": "Initiate Migration Process"
        },
        {
            "location": "/user-guide/migration-from-parse-com/#verify-data-migration",
            "text": "Return to your  mongo  shell, and examine your local database. Begin by accessing  database_name  and examining the collections it contains:  use database_name\nshow collections  Sample output  Wallpaper\nLikes\n_Index\n_SCHEMA\n_Session\n_User\n_dummy\nsystem.indexes  You can examine the contents of a specific collection with the  .find() method:  db.Wallpaper.find()  After verifying the data in your new database, come back to Parse dashboard in your browser and the  Migration  tab:   Click the  Finalize  button:   Your app should now be migrated.",
            "title": "Verify Data Migration"
        },
        {
            "location": "/support/",
            "text": "Migration \n Installation Service\n\n\nWe can offer these services for you if you were unable to complete it yourself. Feel free to contact us at \nsupport@bentenstudio.co\n for price.\n\n\nBug Fix\n\n\nSend an email to \nsupport@bentenstudio.co\n including your purchase code and the issue.\n\n\nOther Questions\n\n\nFeel free to contact us at \nsupport@bentenstudio.co",
            "title": "Support"
        },
        {
            "location": "/support/#migration-installation-service",
            "text": "We can offer these services for you if you were unable to complete it yourself. Feel free to contact us at  support@bentenstudio.co  for price.",
            "title": "Migration &amp; Installation Service"
        },
        {
            "location": "/support/#bug-fix",
            "text": "Send an email to  support@bentenstudio.co  including your purchase code and the issue.",
            "title": "Bug Fix"
        },
        {
            "location": "/support/#other-questions",
            "text": "Feel free to contact us at  support@bentenstudio.co",
            "title": "Other Questions"
        }
    ]
}